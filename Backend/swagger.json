{
  "openapi": "3.0.1",
  "info": {
    "version": "2.0.5",
    "title": "Water tracker",
    "description": "![Water Tracker Logo](https://res.cloudinary.com/doj55bihz/image/upload/c_pad,b_auto:predominant,fl_preserve_transparency/v1704651372/img/Logo-890d13ba_to7trg.jpg?_s=public-apps)\n\n Main page [() => {}](https://bendelvolodymyr.github.io/Smart-Foxes-WaterTracker/welcome)\n\n API documentation for project Water tracker. \n\nWaterTracker is an application that allows users to monitor their daily water consumption.\n\n**Features:**\n\n- User registration and login using password or Google Auth.\n- Password recovery through email confirmation request.\n- User authorization and logout functionalities.\n- Editing user data (avatar, name, email, password).\n- Changing the calculation of the daily rate of water consumption.\n- Adding, updating, and deleting a record of consumed water.\n- Calculation of the amount of water for the current day or the selected month. \n\n**Technologies and packages used:**\n\n- Node.js\n- Axios\n- Bcrypt\n- Cloudinary\n- CORS\n- Dotenv\n- Express\n- Jest\n- Jimp\n- Joi\n- JSONWebToken(JWT)\n- Moment\n- MongoDB\n- Mongoose\n- Morgan\n- Multer\n- Nano ID\n- Nodemailer\n- Query string\n- Swagger-ui-express\n- Nodemon\n\n**Contributors:**\n- Yuliya Turasova [LinkedIn](https://www.linkedin.com/in/yuliya-turasova/) || [GitHub](https://github.com/turasova)\n- Tymur Prysiazhniuk [LinkedIn](https://www.linkedin.com/in/tymur-prysiazhniuk/) || [GitHub](https://github.com/AQR88)\n- Daria Korolenko [LinkedIn](https://www.linkedin.com/in/dariakorolenko/) || [GitHub](https://github.com/KorolenkoDaria).",
    "license": {
      "name": "MIT",
      "url": "https://opensource.org/licenses/MIT"
    }
  },
  "consumes": ["application/json", "multipart/form-data"],
  "produces": ["application/json"],
  "servers": [
    { "url": "http://localhost:3000" },
    { "url": "https://smart-foxes-backend-watertracker.onrender.com" }
  ],
  "tags": [
    {
      "name": "Auth",
      "description": "Authorisation routes/endpoints"
    },
    {
      "name": "User",
      "description": "User profile endpoints"
    },
    {
      "name": "WaterRate",
      "description": "User water rate endpoints"
    }
  ],
  "paths": {
    "/api/users/register": {
      "post": {
        "tags": ["Auth"],
        "summary": "User registration",
        "parameters": [],
        "requestBody": {
          "description": "Registration object",
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/RegisterSchemaRequest" }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Created",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RegisterSchemaResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },

          "409": {
            "description": "Conflict",
            "content": {}
          }
        }
      }
    },
    "/api/users/login": {
      "post": {
        "tags": ["Auth"],
        "summary": "User login",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "requestBody": {
          "description": "Passing an authentication check",
          "required": true,
          "content": {
            "application/json": {
              "schema": { "$ref": "#/components/schemas/LoginSchemaRequest" }
            }
          }
        },
        "responses": {
          "200": {
            "description": "User login successfully/OK",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LoginSchemaResponse" }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Unauthorized",
            "content": {}
          }
        }
      }
    },

    "/api/users/logout": {
      "post": {
        "tags": ["Auth"],
        "summary": "Logout",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "User signed out",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/SuccessLogoutSchema" }
              }
            }
          },
          "401": {
            "description": "Unauthorized",
            "content": {
              "application/json": {
                "schema": { "$ref": "#/components/schemas/LogoutFailedSchema" }
              }
            }
          }
        }
      }
    },

    "/api/users/avatars": {
      "patch": {
        "tags": ["User"],
        "summary": "Change user's avatar",
        "parameters": [],
        "requestBody": {
          "description": "Upload file new user's avatar",
          "required": true,
          "content": {
            "multipart/form-data": {
              "schema": {
                "$ref": "#/components/schemas/UserUploadAvatarRequest"
              }
            }
          }
        },

        "responses": {
          "200": {
            "description": "Avatar's URL",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserUploadAvatarResponse"
                }
              }
            }
          },
          "400": {
            "description": "Avatar must be provided",
            "content": {}
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          }
        }
      }
    },
    "/api/users/current": {
      "get": {
        "tags": ["User"],
        "summary": "Get current user info",
        "parameters": [],
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": " Logged user returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserCurrentInfoResponse"
                }
              }
            }
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          }
        }
      }
    },
    "/api/users": {
      "patch": {
        "tags": ["User"],
        "summary": "Update user profile",
        "parameters": [],
        "requestBody": {
          "description": "Update user",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UserUpdateInfoRequest"
              }
            }
          }
        },
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "Update user returned",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UserUpdateInfoResponse"
                }
              }
            }
          },
          "400": {
            "description": "Validation error",
            "content": {}
          },
          "401": {
            "description": "Not authorized, wrong old password",
            "content": {}
          }
        }
      }
    },
    "/api/water-rate": {
      "patch": {
        "tags": ["WaterRate"],
        "summary": "Change user's water rate",
        "parameters": [],
        "requestBody": {
          "description": "New water rate",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WaterRateRequest"
              }
            }
          }
        },
        "security": [{ "Bearer": [] }],
        "responses": {
          "200": {
            "description": "New water rate value",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WaterRateResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad Request",
            "content": {}
          },
          "401": {
            "description": "Not authorized",
            "content": {}
          }
        }
      }
    },
    "/api/waters": {
      "post": {
        "tags": ["Water"],
        "summary": "Adding a portion of water",
        "requestBody": {
          "description": "Adding a portion of water",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/WaterAddingRequest"
              }
            }
          }
        },
        "responses": {
          "201": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WaterAddingResponse"
                }
              }
            }
          },
          "401": {
            "description": "Unauthorization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          }
        },
        "security": [{ "Bearer": [] }]
      }
    },

    "/api/waters/{id}": {
      "delete": {
        "tags": ["Water"],
        "summary": "Removing a portion of water",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "description": "Portion`s id"
          }
        ],
        "responses": {
          "200": {
            "description": "The portion was successfully deleted.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/WaterDeleteResponse"
                }
              }
            }
          },

          "401": {
            "description": "Unauthorization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "404": {
            "description": "Delete failed. Please try again later",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        }
      },

      "patch": {
        "tags": ["Water"],
        "summary": "Updating a portion of water",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "in": "path",
            "name": "id",
            "required": true,
            "type": "string",
            "description": "Portion`s id"
          }
        ],
        "requestBody": {
          "description": "Editing a portion of water",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdatePortionRequest"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UpdatingPortionResponse"
                }
              }
            }
          },

          "401": {
            "description": "Unauthorization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        }
      }
    },

    "/api/waters/today": {
      "get": {
        "tags": ["Water"],
        "summary": "Get today water data",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "date",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "date=2024-04-13"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortionsPerDay"
                }
              }
            }
          },

          "401": {
            "description": "Unauthorization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        }
      }
    },

    "/api/waters/month": {
      "get": {
        "tags": ["Water"],
        "summary": "Get month portions data",
        "security": [{ "Bearer": [] }],
        "parameters": [
          {
            "name": "startDate",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "2024-04-01"
          },
          {
            "name": "endDate",
            "in": "query",
            "required": true,
            "type": "string",
            "description": "2024-04-30"
          }
        ],
        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PortionsPerMonth"
                }
              }
            }
          },

          "401": {
            "description": "Unauthorization",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnauthorizationResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          }
        }
      }
    },

    "/api/users/passwordReset": {
      "post": {
        "tags": ["Auth"],
        "summary": "Sending the message to the user's email",
        "parameters": [],
        "requestBody": {
          "description": "Forgot password",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordResetRequest"
              }
            }
          }
        },

        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordResetResponse"
                }
              }
            }
          },

          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          }
        }
      }
    },
    "api/users/passwordUpdate/": {
      "patch": {
        "tags": ["Auth"],
        "summary": "Update user's password",
        "parameters": [
          {
            "in": "path",
            "name": "userId",
            "required": true,
            "type": "string",
            "description": "User`s id"
          },
          {
            "in": "path",
            "name": "temporaryId",
            "required": true,
            "type": "string",
            "description": "User`s temporary id"
          }
        ],

        "requestBody": {
          "description": "Update password",
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PasswordUpdateRequest"
              }
            }
          }
        },

        "responses": {
          "200": {
            "description": "Successful operation",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PasswordUpdateResponse"
                }
              }
            }
          },
          "404": {
            "description": "User not found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NotFoundResponse"
                }
              }
            }
          },
          "400": {
            "description": "Bad request",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/BadRequestResponse"
                }
              }
            }
          }
        }
      }
    }
  },

  "components": {
    "schemas": {
      "RegisterSchemaRequest": {
        "type": "object",
        "required": ["email", "password"],

        "properties": {
          "email": {
            "type": "string",
            "description": "User`s email",
            "format": "email"
          },

          "password": {
            "type": "string",
            "description": "User`s password",
            "example": "qwerty123"
          }
        }
      },
      "RegisterSchemaResponse": {
        "type": "object",

        "properties": {
          "email": {
            "type": "string",
            "description": "User`s email",
            "format": "email"
          },

          "token": {
            "type": "string",
            "description": "User`s token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY2MGM3OTM0MThkN2ViNDgwOWY5YmM1NCIsImlhdCI6MTcxMjA5MzQ5MiwiZXhwIjoxNzEyMTc5ODkyfQ.EtuDH-CAYoG5xMI1Kpo8VniyruABBnOPoCqPpBM5fMM"
          }
        }
      },

      "LoginSchemaRequest": {
        "type": "object",

        "required": ["email", "password"],

        "properties": {
          "email": {
            "type": "string",
            "description": "User`s email",
            "format": "email"
          },
          "password": {
            "type": "string",
            "description": "User`s password",
            "example": "qwerty123"
          }
        }
      },
      "LoginSchemaResponse": {
        "type": "object",

        "properties": {
          "email": {
            "type": "string",
            "description": "User`s email",
            "format": "email"
          },

          "token": {
            "type": "string",
            "description": "User`s token",
            "example": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6IjY2MGM3OTM0MThkN2ViNDgwOWY5YmM1NCIsImlhdCI6MTcxMjA5MzQ5MiwiZXhwIjoxNzEyMTc5ODkyfQ.EtuDH-CAYoG5xMI1Kpo8VniyruABBnOPoCqPpBM5fMM"
          }
        }
      },

      "SuccessLogoutSchema": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Login out successfull",
            "example": "Logout success"
          }
        }
      },

      "LogoutFailedSchema": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "Error authentication ",
            "example": "Authentication failed. Please log in."
          }
        }
      },

      "UserUploadAvatarRequest": {
        "type": "object",
        "required": ["avatar"],
        "properties": {
          "avatar": {
            "type": "string",
            "description": "File of avatar",
            "format": "binary"
          }
        }
      },
      "UserUploadAvatarResponse": {
        "type": "object",
        "properties": {
          "avatarURL": {
            "type": "string",
            "description": "Avatar's URL",
            "example": "url/avatars/id_avatar.jpg"
          }
        }
      },
      "UserCurrentInfoResponse": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Yuliya"
          },
          "avatarURL": {
            "type": "string",
            "description": "User's avatar",
            "example": "url/avatars/id_avatar.jpg"
          },
          "gender": {
            "type": "string",
            "description": "User's gender",
            "example": "female",
            "enum": ["male", "female"]
          },
          "waterRate": {
            "type": "integer",
            "description": "User's daily water rate",
            "example": "2000"
          }
        }
      },
      "UserUpdateInfoRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Yuliya"
          },
          "gender": {
            "type": "string",
            "description": "User's gender",
            "example": "female",
            "enum": ["male", "female"]
          },
          "oldPassword": {
            "type": "string",
            "description": "Old user's password",
            "example": "qwerty123"
          },
          "newPassword": {
            "type": "string",
            "description": "New user's password",
            "example": "qwerty123..."
          }
        }
      },
      "UserUpdateInfoResponse": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          },
          "name": {
            "type": "string",
            "description": "User's name",
            "example": "Yuliya"
          },
          "gender": {
            "type": "string",
            "description": "User's gender",
            "example": "female",
            "enum": ["male", "female"]
          }
        }
      },
      "WaterRateRequest": {
        "type": "object",
        "required": ["waterRate"],
        "properties": {
          "waterRate": {
            "type": "integer",
            "description": "User's water rate",
            "example": 2000
          }
        }
      },
      "WaterRateResponse": {
        "type": "object",
        "properties": {
          "waterRate": {
            "type": "integer",
            "description": "User's water rate",
            "example": 2000
          }
        }
      },
      "WaterAddingRequest": {
        "type": "object",
        "required": ["waterVolume", "date"],
        "properties": {
          "waterVolume": {
            "type": "integer",
            "example": 200
          },
          "date": {
            "type": "string",
            "example": "2024-04-13T02:40:00.000Z"
          }
        }
      },
      "WaterAddingResponse": {
        "type": "object",
        "properties": {
          "dateAdded": {
            "type": "string",
            "example": "2024-04-13T02:40:00.000Z"
          },
          "waterVolume": {
            "type": "integer",
            "example": 200
          },
          "_id": {
            "type": "string",
            "example": "660d1669c6da2477d73d6371"
          }
        }
      },
      "UnauthorizationResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "error message",
            "example": "Not authorized"
          }
        }
      },
      "BadRequestResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "error message",
            "example": "Bad request"
          }
        }
      },
      "WaterDeleteRequest": {
        "type": "object",
        "required": ["id"],
        "properties": {
          "id": {
            "type": "string",
            "example": "660d2b2c8771d1351ec5ab85",
            "description": "ID of the portion to be deleted"
          }
        }
      },
      "WaterDeleteResponse": {
        "type": "object",
        "properties": {
          "_id": {
            "type": "string",
            "example": "660d1669c6da2477d73d6371"
          },
          "massage": {
            "type": "string",
            "example": "The portion was successfully deleted."
          }
        }
      },
      "NotFoundResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "description": "error message",
            "example": "Not found"
          }
        }
      },
      "UpdatePortionRequest": {
        "type": "object",
        "required": ["waterVolume"],
        "properties": {
          "waterVolume": {
            "type": "integer",
            "example": 200
          },
          "date": {
            "type": "string",
            "example": "2024-04-13T02:40:00.000Z"
          }
        }
      },
      "UpdatingPortionResponse": {
        "type": "object",
        "properties": {
          "dateAdded": {
            "type": "string",
            "example": "2024-04-13T02:40:00.000Z"
          },
          "waterVolume": {
            "type": "integer",
            "example": 200
          },
          "_id": {
            "type": "string",
            "example": "660d1669c6da2477d73d6371"
          }
        }
      },
      "PortionsPerDay": {
        "type": "object",
        "properties": {
          "sumPortions": {
            "type": "integer",
            "example": 4
          },
          "countPercentage": {
            "type": "integer",
            "example": 100
          },
          "portions": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "660d1669c6da2477d73d6371"
                },
                "dateAdded": {
                  "type": "string",
                  "example": "2024-04-13T02:40:00.000Z"
                },
                "waterRate": {
                  "type": "integer",
                  "example": 2000
                },
                "waterVolume": {
                  "type": "integer",
                  "example": 200
                },
                "owner": {
                  "type": "string",
                  "example": "660d1669c6da2477d73d6371"
                },
                "percentage": {
                  "type": "integer",
                  "example": 80
                }
              }
            }
          }
        }
      },
      "PortionsPerMonth": {
        "type": "object",
        "properties": {
          "monthData": {
            "type": "array",
            "items": {
              "type": "object",
              "properties": {
                "_id": {
                  "type": "string",
                  "example": "2024-04-13"
                },
                "waterRate": {
                  "type": "integer",
                  "example": 2000
                },
                "totalWaterDrunk": {
                  "type": "integer",
                  "example": 4000
                },
                "totalPortions": {
                  "type": "integer",
                  "example": 20
                },
                "date": {
                  "type": "string",
                  "example": "13, April"
                },
                "percentagePerDay": {
                  "type": "integer",
                  "example": 80
                }
              }
            }
          }
        }
      },

      "PasswordResetRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          }
        }
      },
      "PasswordResetRequest": {
        "type": "object",
        "properties": {
          "email": {
            "type": "string",
            "description": "User's email",
            "format": "email"
          }
        }
      },
      "PasswordResetResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Email sent"
          }
        }
      },
      "PasswordUpdateRequest": {
        "type": "object",
        "properties": {
          "password": {
            "type": "string",
            "description": "User's password"
          }
        }
      },
      "PasswordUpdateResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Password reset"
          }
        }
      }
    },

    "securitySchemes": {
      "Bearer": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    }
  }
}
